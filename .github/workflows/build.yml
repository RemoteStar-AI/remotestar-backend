name : Build

on: 
    push:
        branches:
            - main
        paths:
          - 'src/**'
          - 'package.json'
          - 'tsconfig.json'
          - 'Dockerfile'
          - 'docker-compose.yml'
    workflow_dispatch:
jobs:
    build:
        runs-on: ubuntu-latest
        environment: production
        env:
            NODE_VERSION : 18.x
            NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
            NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
            NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
            NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
            NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
            NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
            NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
            PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
            PORT: ${{ secrets.PORT }}
            MONGODB_URI: ${{ secrets.MONGODB_URI }}
            FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
            
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name : setup-node
              uses : actions/setup-node@v3
              with : 
                node-version: 18
            - name : Cache node_modules
              uses : actions/cache@v3
              with : 
                path : node_modules
                key : ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
                restore-keys : |
                    ${{ runner.os }}-node-
            - name : Install dependencies
              run : npm install
            - name : Validate
              run : npm run validate
            - name : Build
              run : npm run build
            - name: Create .env file
              run: |
                cat <<EOF > .env
                 NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
                NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
                NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
                NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
                NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
                NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
                NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
                PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
                OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                PORT=${{ secrets.PORT }}
                MONGODB_URI=${{ secrets.MONGODB_URI }}
                FIREBASE_SERVICE_ACCOUNT=${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
                EMAIL_USER=${{ secrets.EMAIL_USER }}
                EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
                WEBSITE_URL=${{ secrets.WEBSITE_URL }}
                EOF
            - name: Build Docker image
              run: docker build -t test-image:ci .
            - name: Test Docker container health endpoint
              run: |
                echo "==============================="
                echo "[INFO] Starting Docker container for health check..."
                echo "Using image: test-image:ci"
                docker run -d -p 3000:3000 --env-file .env --name test_container test-image:ci
                echo "[INFO] Waiting for the app to start..."
                sleep 30
                echo "[INFO] Printing container logs after startup:"
                docker logs test_container
                echo "[INFO] Checking / endpoint for HTTP 200..."
                STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/)
                if [ "$STATUS" != "200" ]; then
                  echo "[ERROR] / endpoint did not return 200 (got $STATUS)"
                  echo "[ERROR] Container logs:"
                  docker logs test_container
                  echo "[INFO] Stopping and removing container after failed health check."
                  docker stop test_container
                  docker rm test_container
                  exit 1
                fi
                echo "[SUCCESS] Health check passed! Printing final container logs:"
                docker logs test_container
                echo "[INFO] Stopping and removing container after successful health check."
                docker stop test_container
                docker rm test_container
                echo "==============================="
